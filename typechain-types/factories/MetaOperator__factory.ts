/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MetaOperator, MetaOperatorInterface } from "../MetaOperator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "treeNFTAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "certNFTAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Carboncredits",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DAPPAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NGOAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "certOwner",
        type: "address",
      },
    ],
    name: "balanceOfCertificateNFT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOfTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "buyCarbonCredits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_origin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "canSponsorTransactionFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "certOwner",
        type: "address",
      },
    ],
    name: "certificatesAndScoresOfCertificateOwner",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "disburseTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getCertificateScore",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getTreeLevel",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "levelUpTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "score",
        type: "uint256",
      },
    ],
    name: "mintCertificate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mintTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "rewardTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "treeOwner",
        type: "address",
      },
    ],
    name: "tokensAndLevelsOfTreeOwner",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferTokensFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a4138038062001a4183398181016040528101906200003791906200016c565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001c8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001348262000107565b9050919050565b620001468162000127565b81146200015257600080fd5b50565b60008151905062000166816200013b565b92915050565b60008060006060848603121562000188576200018762000102565b5b6000620001988682870162000155565b9350506020620001ab8682870162000155565b9250506040620001be8682870162000155565b9150509250925092565b61186980620001d86000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c8063998f90bb116100ad578063bec3fa1711610071578063bec3fa171461033f578063c0790f571461035b578063c5666a0514610379578063f38488ec14610395578063fe19b68b146103b157610120565b8063998f90bb146102af5780639a044cfa146102cb578063a5015dd1146102e9578063a741960b14610305578063be4780c21461032357610120565b806352912042116100f457806352912042146101e5578063681a3a5214610201578063717f96d2146102315780637a38664e1461026257806381a4af151461029357610120565b806283293e146101255780632bce3fbe146101555780632ff57da8146101855780633ee8eb6e146101b5575b600080fd5b61013f600480360381019061013a91906110a8565b6103cd565b60405161014c91906110ee565b60405180910390f35b61016f600480360381019061016a9190611135565b610472565b60405161017c91906110ee565b60405180910390f35b61019f600480360381019061019a91906110a8565b610517565b6040516101ac91906110ee565b60405180910390f35b6101cf60048036038101906101ca9190611135565b6105bb565b6040516101dc91906110ee565b60405180910390f35b6101ff60048036038101906101fa9190611162565b610660565b005b61021b6004803603810190610216919061121a565b610706565b60405161022891906112a9565b60405180910390f35b61024b600480360381019061024691906110a8565b610714565b604051610259929190611382565b60405180910390f35b61027c600480360381019061027791906110a8565b6107c1565b60405161028a929190611382565b60405180910390f35b6102ad60048036038101906102a891906113b9565b61086e565b005b6102c960048036038101906102c49190611135565b6108ff565b005b6102d3610c3d565b6040516102e09190611408565b60405180910390f35b61030360048036038101906102fe91906113b9565b610c55565b005b61030d610ce8565b60405161031a9190611408565b60405180910390f35b61033d60048036038101906103389190611135565b610d00565b005b610359600480360381019061035491906113b9565b610d90565b005b610363610e33565b6040516103709190611408565b60405180910390f35b610393600480360381019061038e9190611135565b610e4b565b005b6103af60048036038101906103aa91906113b9565b610f03565b005b6103cb60048036038101906103c691906110a8565b610fa6565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161042a9190611408565b602060405180830381865afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190611438565b9050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632bce3fbe836040518263ffffffff1660e01b81526004016104cf91906110ee565b602060405180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105109190611438565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016105739190611408565b602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190611438565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ee8eb6e836040518263ffffffff1660e01b815260040161061891906110ee565b602060405180830381865afa158015610635573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106599190611438565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff1660e01b81526004016106bd93929190611465565b6020604051808303816000875af11580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070091906114c8565b50505050565b600060019050949350505050565b606080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a73c0b7846040518263ffffffff1660e01b81526004016107729190611408565b600060405180830381865afa15801561078f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107b89190611644565b91509150915091565b606080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638462151c846040518263ffffffff1660e01b815260040161081f9190611408565b600060405180830381865afa15801561083c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108659190611644565b91509150915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f001b42183836040518363ffffffff1660e01b81526004016108c99291906116bc565b600060405180830381600087803b1580156108e357600080fd5b505af11580156108f7573d6000803e3d6000fd5b505050505050565b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109599190611408565b602060405180830381865afa158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a9190611438565b10156109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d290611742565b60405180910390fd5b600060646028836109ec9190611791565b6109f69190611802565b905060006064601e84610a099190611791565b610a139190611802565b905060006064601e85610a269190611791565b610a309190611802565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb7340d5568fe100dbc06a5ed91862b85250f54881e2856040518363ffffffff1660e01b8152600401610aa19291906116bc565b6020604051808303816000875af1158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae491906114c8565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610b409291906116bc565b6020604051808303816000875af1158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8391906114c8565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73c888636228a82f0f59abae53b9850500d0ba1d41836040518363ffffffff1660e01b8152600401610bf39291906116bc565b6020604051808303816000875af1158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3691906114c8565b5050505050565b7340d5568fe100dbc06a5ed91862b85250f54881e281565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401610cb29291906116bc565b600060405180830381600087803b158015610ccc57600080fd5b505af1158015610ce0573d6000803e3d6000fd5b505050505050565b733299bb0ce7bed82cd4dd4098e13268b18c569eb481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ce90ec2826040518263ffffffff1660e01b8152600401610d5b91906110ee565b600060405180830381600087803b158015610d7557600080fd5b505af1158015610d89573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610deb9291906116bc565b6020604051808303816000875af1158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e91906114c8565b505050565b73c888636228a82f0f59abae53b9850500d0ba1d4181565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33733299bb0ce7bed82cd4dd4098e13268b18c569eb4846040518463ffffffff1660e01b8152600401610ebc93929190611465565b6020604051808303816000875af1158015610edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff91906114c8565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401610f5e9291906116bc565b6020604051808303816000875af1158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa191906114c8565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a627842826040518263ffffffff1660e01b81526004016110019190611408565b600060405180830381600087803b15801561101b57600080fd5b505af115801561102f573d6000803e3d6000fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110758261104a565b9050919050565b6110858161106a565b811461109057600080fd5b50565b6000813590506110a28161107c565b92915050565b6000602082840312156110be576110bd611040565b5b60006110cc84828501611093565b91505092915050565b6000819050919050565b6110e8816110d5565b82525050565b600060208201905061110360008301846110df565b92915050565b611112816110d5565b811461111d57600080fd5b50565b60008135905061112f81611109565b92915050565b60006020828403121561114b5761114a611040565b5b600061115984828501611120565b91505092915050565b60008060006060848603121561117b5761117a611040565b5b600061118986828701611093565b935050602061119a86828701611093565b92505060406111ab86828701611120565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f8401126111da576111d96111b5565b5b8235905067ffffffffffffffff8111156111f7576111f66111ba565b5b602083019150836001820283011115611213576112126111bf565b5b9250929050565b6000806000806060858703121561123457611233611040565b5b600061124287828801611093565b945050602061125387828801611093565b935050604085013567ffffffffffffffff81111561127457611273611045565b5b611280878288016111c4565b925092505092959194509250565b60008115159050919050565b6112a38161128e565b82525050565b60006020820190506112be600083018461129a565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6112f9816110d5565b82525050565b600061130b83836112f0565b60208301905092915050565b6000602082019050919050565b600061132f826112c4565b61133981856112cf565b9350611344836112e0565b8060005b8381101561137557815161135c88826112ff565b975061136783611317565b925050600181019050611348565b5085935050505092915050565b6000604082019050818103600083015261139c8185611324565b905081810360208301526113b08184611324565b90509392505050565b600080604083850312156113d0576113cf611040565b5b60006113de85828601611093565b92505060206113ef85828601611120565b9150509250929050565b6114028161106a565b82525050565b600060208201905061141d60008301846113f9565b92915050565b60008151905061143281611109565b92915050565b60006020828403121561144e5761144d611040565b5b600061145c84828501611423565b91505092915050565b600060608201905061147a60008301866113f9565b61148760208301856113f9565b61149460408301846110df565b949350505050565b6114a58161128e565b81146114b057600080fd5b50565b6000815190506114c28161149c565b92915050565b6000602082840312156114de576114dd611040565b5b60006114ec848285016114b3565b91505092915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61153e826114f5565b810181811067ffffffffffffffff8211171561155d5761155c611506565b5b80604052505050565b6000611570611036565b905061157c8282611535565b919050565b600067ffffffffffffffff82111561159c5761159b611506565b5b602082029050602081019050919050565b60006115c06115bb84611581565b611566565b905080838252602082019050602084028301858111156115e3576115e26111bf565b5b835b8181101561160c57806115f88882611423565b8452602084019350506020810190506115e5565b5050509392505050565b600082601f83011261162b5761162a6111b5565b5b815161163b8482602086016115ad565b91505092915050565b6000806040838503121561165b5761165a611040565b5b600083015167ffffffffffffffff81111561167957611678611045565b5b61168585828601611616565b925050602083015167ffffffffffffffff8111156116a6576116a5611045565b5b6116b285828601611616565b9150509250929050565b60006040820190506116d160008301856113f9565b6116de60208301846110df565b9392505050565b600082825260208201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061172c6014836116e5565b9150611737826116f6565b602082019050919050565b6000602082019050818103600083015261175b8161171f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061179c826110d5565b91506117a7836110d5565b92508282026117b5816110d5565b915082820484148315176117cc576117cb611762565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061180d826110d5565b9150611818836110d5565b925082611828576118276117d3565b5b82820490509291505056fea2646970667358221220183c44d4159a9d5153eadd3d797988724d14f423c639da17e738934b1445ffc964736f6c63430008120033";

type MetaOperatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaOperatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaOperator__factory extends ContractFactory {
  constructor(...args: MetaOperatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    tokenAddr: AddressLike,
    treeNFTAddr: AddressLike,
    certNFTAddr: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      tokenAddr,
      treeNFTAddr,
      certNFTAddr,
      overrides || {}
    );
  }
  override deploy(
    tokenAddr: AddressLike,
    treeNFTAddr: AddressLike,
    certNFTAddr: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      tokenAddr,
      treeNFTAddr,
      certNFTAddr,
      overrides || {}
    ) as Promise<
      MetaOperator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MetaOperator__factory {
    return super.connect(runner) as MetaOperator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaOperatorInterface {
    return new Interface(_abi) as MetaOperatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MetaOperator {
    return new Contract(address, _abi, runner) as unknown as MetaOperator;
  }
}
