/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MetaOperatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveTokens"
      | "balanceOfCertificateNFT"
      | "balanceOfTokens"
      | "certificatesAndScoresOfCertificateOwner"
      | "getCertificateScore"
      | "getTreeLevel"
      | "levelUpTree"
      | "mintCertificate"
      | "mintTree"
      | "owner"
      | "rewardTokens"
      | "setCertificateNFTAddress"
      | "setTokenAddress"
      | "setTreeNFTAddress"
      | "tokensAndLevelsOfTreeOwner"
      | "transferTokens"
      | "transferTokensFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfCertificateNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "certificatesAndScoresOfCertificateOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificateScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreeLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUpTree",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCertificate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTree",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCertificateNFTAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreeNFTAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensAndLevelsOfTreeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokensFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfCertificateNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificatesAndScoresOfCertificateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificateScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreeLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelUpTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTree", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCertificateNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreeNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensAndLevelsOfTreeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokensFrom",
    data: BytesLike
  ): Result;
}

export interface MetaOperator extends BaseContract {
  connect(runner?: ContractRunner | null): MetaOperator;
  waitForDeployment(): Promise<this>;

  interface: MetaOperatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveTokens: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOfCertificateNFT: TypedContractMethod<
    [certOwner: AddressLike],
    [bigint],
    "view"
  >;

  balanceOfTokens: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  certificatesAndScoresOfCertificateOwner: TypedContractMethod<
    [certOwner: AddressLike],
    [[bigint[], bigint[]]],
    "view"
  >;

  getCertificateScore: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getTreeLevel: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  levelUpTree: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintCertificate: TypedContractMethod<
    [to: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintTree: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  rewardTokens: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCertificateNFTAddress: TypedContractMethod<
    [certNFTAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenAddress: TypedContractMethod<
    [tokenAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreeNFTAddress: TypedContractMethod<
    [treeNFTAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  tokensAndLevelsOfTreeOwner: TypedContractMethod<
    [treeOwner: AddressLike],
    [[bigint[], bigint[]]],
    "view"
  >;

  transferTokens: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferTokensFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveTokens"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOfCertificateNFT"
  ): TypedContractMethod<[certOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfTokens"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "certificatesAndScoresOfCertificateOwner"
  ): TypedContractMethod<
    [certOwner: AddressLike],
    [[bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCertificateScore"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTreeLevel"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "levelUpTree"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintCertificate"
  ): TypedContractMethod<
    [to: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintTree"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCertificateNFTAddress"
  ): TypedContractMethod<[certNFTAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenAddress"
  ): TypedContractMethod<[tokenAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreeNFTAddress"
  ): TypedContractMethod<[treeNFTAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokensAndLevelsOfTreeOwner"
  ): TypedContractMethod<
    [treeOwner: AddressLike],
    [[bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferTokens"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferTokensFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
